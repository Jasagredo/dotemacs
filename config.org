#+TITLE: Javier's Emacs configuration
#+OPTIONS: toc:4 h:4
#+PROPERTY: header-args:emacs-lisp :tangle yes :results silent :exports code

* About this file

This is my personal config file, where I try to explain why I chose certain
things and link to relevant places where I found code snippets that allowed
me to configure my Emacs.

If you feel something could be done in a better way, feel free to contact me
and let me know.

I tend to forget using already defined variables such as
~user-emacs-directory~, so maybe there are lots of duplicated functionality.

* Starting up
We will install local elisp packages in the system directory following [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Search.html][the
convention]]. Org-mode package will be loaded from sources in order to make it
available from the beginning.

If there is a ~custom.el~ file in our emacs directory, then we will load it
to ensure any changes made by customize are loaded. Eventually these changes
will either become permanent and be added to this configuration or will be
discarded.

#+begin_src emacs-lisp
  (defvar gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  (package-initialize)
  (add-to-list 'load-path (concat user-emacs-directory "org-mode/lisp"))
  (add-to-list 'load-path (concat user-emacs-directory "org-mode/contrib/lisp"))
  (require 'org)
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file)
  (load custom-file))
  (global-auto-revert-mode)
  (global-set-key (kbd "<f12>") '(lambda () (interactive) (find-file (concat user-emacs-directory "config.org"))))
  (global-set-key (kbd "C-<f12>") '(lambda () (interactive) (progn (org-babel-tangle (concat user-emacs-directory "config.org"))
                                                              (byte-compile-file (concat user-emacs-directory "config.el"))
                                                              (load-file (concat user-emacs-directory "config.elc")))))
#+end_src
  
* Personal information

#+begin_src emacs-lisp
(setq user-full-name "Javier Sagredo"
      user-mail-address "jasataco@gmail.com")
#+end_src

* Emacs initialization (setting up use-package)
Setting up package repositories and means to install packages from those.

** Set package sources
I will use the [[https://melpa.org/#/][MELPA]] package repository and a [[https://orgmode.org/elpa/][specific source for org mode]].
#+begin_src emacs-lisp
(unless (assoc-default "melpa" package-archives)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
(unless (assoc-default "org" package-archives)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t))
#+end_src

This will allow for running ~M-x package-refresh-contents~ to update the
available list of packages.
    
** Initialize use-package
I will use ~use-package~ as a macro for defining my configuration blocks.

Setting ~use-package-always-ensure~ will install any missing packages in the
future.
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (setq package-check-signature nil)
    (package-refresh-contents)
    (package-install 'gnu-elpa-keyring-update)
    (setq package-check-signature 'allow-unsigned)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-verbose t)
  (setq use-package-always-ensure t)

  (use-package auto-compile
    :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)

  (use-package use-package-ensure-system-package)
#+end_src
    
* General configuration
** Window visual configuration
I will always start Emacs maximized. Also the menu, scroll and tool bars are
quite useless to me so I disable them. Modeline text will show both the line and
column number, and every programming buffer will have line numbers unless otherwise
specified.

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (setq-default cursor-type 'hbar)
  (toggle-scroll-bar -1)
  (add-hook 'prog-mode-hook #'linum-mode)
  (column-number-mode)
#+end_src

** Visual options
Here I set a bunch of variables related to how are buffers presented.

- The frame title should be the path to the file I'm reading now.
   
- I want to see matching parenthesis immediately and I also like having the
  fill-column indicator everywhere, for 80 chars.

- Also I like having the current line highlighted always.
   
#+begin_src emacs-lisp
  (setq frame-title-format '(:eval (if (buffer-file-name) (abbreviate-file-name (buffer-file-name)) "%b")))
  (setq visible-bell t)

  (use-package paren
        :custom
        (show-paren-delay 0)
        :config
        (show-paren-mode))

    (use-package display-fill-column-indicator
        :config (setq-default fill-column 80)
        :hook (prog-mode . display-fill-column-indicator-mode))

    (global-prettify-symbols-mode)
    (set-face-attribute 'default nil :height 120)
    (global-hl-line-mode)
#+end_src
   
** Editing and navegation options
- When I paste something on top of a selection I want to actually replace that
  selection. This is achieved with ~delete-selection-mode~.

- Also I don't want to use tabs, and if I ever use TAGS files, I want them to
  reload automatically.

- The mouse options make scrolling smoother.

- Windmove allows to use ctrl+arrow to move between frames.
   
#+begin_src emacs-lisp
(delete-selection-mode)
(setq-default indent-tabs-mode nil)
(setq tags-revert-without-query 1)
(setq mouse-wheel-follow-mouse 't
      scroll-conservatively 101
      mouse-wheel-scroll-amount '(1 ((shift) . 1)))
(windmove-default-keybindings)
#+end_src

** UTF-8
Always use UTF-8 when possible.
#+begin_src emacs-lisp
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src
   
** Backups
I don't like Emacs backups so this should move them to a hidden place.
#+begin_src emacs-lisp
(setq create-lockfiles nil
      backup-directory-alist '(("." . "~/.emacs.d/backup"))
      backup-by-copying t
      version-control nil
      delete-old-versions t)
#+end_src
   
** Web browser
I use firefox as my web browser.

#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "firefox")   
#+end_src

* Helper functions
A function to make a boxed title. For creating visual sections in code files.
  
#+begin_src emacs-lisp
(defun repeat-times (times what)
   (apply 'concat (make-list times what)))
(defun create-boxed-title (title)
  "Create a dash of 80 chars wide with a text in the center"
  (interactive "sWrite the title: ")
  (let* ((width (string-width title)) ;; the length of the title 
         (comm (replace-regexp-in-string "\s+$" "" comment-start)) ;; trimmed comment chars
         (comment-width (string-width comment-start)) ;; the length of the comment
         (side (/ (- fill-column width (* comment-width 2)) 2)) ;; spaces on each side
         (rem (- fill-column width (* comment-width 2) (* side 2))) ;; maybe one space at the right side if odd
         (buffer (current-buffer)))
    (insert (format "%s\n" (repeat-times (/ fill-column comment-width) comm)))
    (insert (format "%s%s%s\n" comm (repeat-times (- fill-column (* 2 comment-width)) " ") comm))
    (insert (format "%s%s%s\n" comm (concat (repeat-times side " ") title (repeat-times (+ rem side) " ")) comm))
    (insert (format "%s%s%s\n" comm (repeat-times (- fill-column (* 2 comment-width)) " ") comm))
    (insert (format "%s\n" (repeat-times (/ fill-column comment-width) comm)))))       
(add-hook 'prog-mode-hook (lambda() (global-set-key (kbd "C-c C-t") 'create-dashed-title)))
#+end_src

* Emacs default prompts
I prefer answering y or n always. And I don't want to confirm that I want to
kill a buffer.
#+begin_src emacs-lisp
(bind-key (kbd "C-x k") #'kill-this-buffer)
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

#+begin_comment
This will change with the new ~use-short-answers~ variable that will be introduced in Emacs.
#+end_comment
* External elisp packages
** Navigation
*** Selectrum: Helm replacement
As a global incremental narrowing solution we will use [[https://github.com/raxod502/selectrum][Selectrum]]. Selectrum
fully replaces Helm and can be combined with other packages to make the user
experience more pleasant.

#+begin_src emacs-lisp
(use-package selectrum 
  :init (selectrum-mode))
#+end_src

[[https://github.com/raxod502/prescient.el][Prescient]] is a more intelligent sorting framework.

#+begin_src emacs-lisp
(use-package prescient 
  :config (prescient-persist-mode))
(use-package selectrum-prescient 
  :init (prescient-persist-mode) 
  :after (selectrum prescient))
(use-package company-prescient 
  :init (company-prescient-mode) 
  :after (company prescient))
#+end_src

[[https://github.com/minad/consult][Consult]] shows previews of things. Very useful before switching buffers or when
navigating through a file.

#+begin_src emacs-lisp
(use-package consult
  :after projectile
  :bind (("C-x r x" . consult-register)
         ("C-x r b" . consult-bookmark)
         ("C-c k" . consult-kmacro)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complet-command
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ("M-g o" . consult-outline) 
         ("M-g m" . consult-mark)
         ("C-x b" . consult-buffer)
         ("M-y" . consult-yank-pop)
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-project-imenu)
         ("M-g e" . consult-error)
         ;; M-s bindings (search-map)
         ("M-s f" . consult-find)
         ("M-s L" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch)
         ("M-g l" . consult-line)    
         ("M-s m" . consult-multi-occur)
         ("C-x c o" . consult-multi-occur)
         ("C-x c SPC" . consult-mark)
         :map isearch-mode-map
         ("M-e" . consult-isearch)                 ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch)               ;; orig. isearch-edit-string
         ("M-s l" . consult-line))
  :custom
  (register-preview-delay 0)
  (register-preview-function #'consult-register-format)
  (consult-project-root-function #'projectile-project-root)
  (consult-narrow-key "<")
  :config
  (projectile-load-known-projects)
  (setq my/consult-source-projectile-projects
              `(:name "Projectile projects"
                      :narrow   ?P
                      :category project
                      :action   ,#'projectile-switch-project-by-name
                      :items    ,projectile-known-projects))
  (add-to-list 'consult-buffer-sources my/consult-source-projectile-projects 'append))
#+end_src

[[https://github.com/minad/marginalia/][Marginalia]] adds annotations on the options listed by Selectrum.

#+begin_src emacs-lisp
(use-package marginalia
   :init
   (marginalia-mode)
   :custom
   (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
   :config
   (advice-add #'marginalia-cycle :after
               (lambda () (when (bound-and-true-p selectrum-mode) (selectrum-exhibit)))))
#+end_src

#+begin_comment
Perhaps Embark is a good addition to this flow.
#+end_comment

Will use orderless to get regexp like filtering.   
#+begin_src emacs-lisp
(use-package orderless
  :custom (completion-styles '(orderless)))
#+end_src

*** Dired: file manager
I don't like when dired creates a new buffer for each file/directory it opens
so this will replace that behavior. It will now open the files and
directories in this same buffer.
#+BEGIN_SRC emacs-lisp
(use-package dired
    :ensure nil ; otherwise use-package will try to install it.
    :bind
    (:map dired-mode-map
          ("<mouse-2>" . dired-find-alternate-file)
          ("RET" . dired-find-alternate-file)
          ("^" . (lambda () (interactive) (find-alternate-file ".."))))
    :config
    (put 'dired-find-alternate-file 'disabled nil))
#+end_src
*** Dashboard
A startup screen extracted from Spacemacs
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :config (dashboard-setup-startup-hook)
          (add-to-list 'recentf-exclude
                       "/\\.emacs\\.d/")
          (recentf-cleanup)
  :custom (dashboard-items '((recents  . 10)
                             (projects . 10)))
          (dashboard-set-heading-icons t)
          (dashboard-set-file-icons t))
#+END_SRC
*** Treemacs
A tree layout file explorer for Emacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
   :bind
   ("<f2>" . treemacs))

(use-package treemacs-projectile)

(use-package treemacs-magit)
#+END_SRC
*** Projectile
Manage and navigate projects in Emacs easily. I personally don't take much
advantage of this but it is probably because I didn't invest enough time in
learning how it works.
    
#+BEGIN_SRC emacs-lisp
(use-package projectile
    :custom (projectile-enable-caching nil)
            (projectile-switch-project-action 'projectile-dired)
    :bind-keymap ("C-c p" . projectile-command-map)
    :config (projectile-mode))
#+END_SRC
*** Code-compass
This is much better described by it's [[https://github.com/ag91/code-compass][github repo README]].
#+begin_src emacs-lisp
  (use-package f)
  (use-package async)
  (use-package simple-httpd)
  (add-to-list 'load-path (concat user-emacs-directory "lisp/code-compass"))
  (require 'code-compass)
#+end_src
** Environment
*** Exec-path-from-shell: PATH & related variables
Get environment variables such as $PATH from the shell
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :custom (exec-path-from-shell-variables '("PATH"))
            (exec-path-from-shell-check-startup-files nil)
            (exec-path-from-shell-arguments nil)
    :config (exec-path-from-shell-initialize))
#+END_SRC
** Editing
*** Company autocomplete
Modular text completion framework
#+BEGIN_SRC emacs-lisp
(use-package company        
    :custom
    (company-idle-delay .3)
    (company-echo-delay 0)
    (company-tooltip-limit 15)
    (company-minimum-prefix-length 1)
    (company-dabbrev-downcase nil)
    :hook
    (prog-mode . company-mode))
#+END_SRC
*** Flycheck
On-the-fly syntax checking
#+BEGIN_SRC emacs-lisp
(use-package flycheck
    :hook (prog-mode . flycheck-mode))
#+END_SRC
*** Minor editing packages
#+begin_src emacs-lisp
(use-package smartparens
  :config
  (show-smartparens-global-mode))
(use-package undo-tree
  :config
  (global-undo-tree-mode))
(use-package multiple-cursors
  :bind
  ("C-S-c C-S-c" . mc/edit-lines))
(use-package ws-butler
  :hook
  (prog-mode . ws-butler-mode))
(use-package ace-window
  :bind
  ("M-o" . ace-window))
(use-package anzu
  :config
  (global-anzu-mode))
(use-package expand-region
  :bind
  ("C-=" . er/expand-region))
#+end_src
** Visual
Some visual packages that don't nearly require configuration. The fira-code part
comes from [[https://github.com/johnw42/fira-code-emacs][here]].
#+begin_src emacs-lisp
(use-package all-the-icons)
(use-package doom-themes        :config (load-theme 'doom-dracula t))
(use-package doom-modeline      :config (doom-modeline-mode))  
(use-package which-key          :config (which-key-mode))
(use-package org-superstar      :hook (org-mode . org-superstar-mode))
(use-package rainbow-delimiters :hook (prog-mode . rainbow-delimiters-mode))
(use-package indent-guide       :hook (prog-mode . indent-guide-mode))
(use-package beacon             :hook (prog-mode . beacon-mode))

(add-to-list 'load-path "~/.emacs.d/lisp/fira-code-emacs/")
(load "fira-code-data.el")
(load "fira-code.el")
(add-hook 'prog-mode-hook 'fira-code-mode)
(set-frame-font "Fira Emacs 12" nil t)
#+end_src
** Org 
#+begin_src emacs-lisp
  (setq js/org-directory "~/org/")
  (defun org-file (x) (concat js/org-directory x))
  (require 'cl-lib)
  (use-package org    
      :custom ; set variables
      (org-structure-template-alist '(("q" . "quote")
                                      ("s" . "src")
                                      ("el" . "src emacs-lisp")))
      (org-todo-keywords '((sequence "TODO(t)" "WIP(w!)" "CHASE(c@/!)" "GAVE(g@/!)" "|" "DONE(d@/!)" "KILL(k@/!)")))
      (org-agenda-files (cl-concatenate 'list (directory-files js/org-directory t "\.org$" t) (directory-files (concat js/org-directory "projects/") t "\.org$" t)))
      (org-refile-targets (mapcar (lambda (x) `(,(org-file x))) '("agenda.org" "emails.org" "personal.org" "someday.org")))
      (org-capture-templates '(("i" "inbox" entry (file "~/org/inbox.org") "* TODO %?")
                               ("t" "thought" entry (file "~/org/thoughts.org") "* %?")))
      (org-columns-default-format "%40ITEM(Task) %CLOCKSUM(Time Spent) %SCHEDULED(Scheduled) %DEADLINE(Deadline)")

      (org-agenda-custom-commands '(("&" "Agenda"
             ((agenda ""
                     ((org-agenda-span 'day)
                      (org-deadline-warning-days 365)))
             (todo "TODO"
                   ((org-agenda-overriding-header "Needs triage")
                    (org-agenda-files (list (org-file "inbox.org")))))
             (todo "TODO"
                   ((org-agenda-overriding-header "Emails")
                    (org-agenda-files (list (org-file "emails.org")))))
             (todo "WIP"
                   ((org-agenda-overriding-header "In Progress")))
             (todo "TODO"
                   ((org-agenda-overriding-header "Projects")
                    (org-agenda-files (list (org-file "agenda.org")))
                    ))
             (todo "CHASE"
                   ((org-agenda-overriding-header "Chasing")
                    (org-agenda-files (list (org-file "agenda.org")))
                    ))
             (todo "GAVE"
                   ((org-agenda-overriding-header "Given")
                    (org-agenda-files (list (org-file "agenda.org")))
                    ))
             nil))))
      :custom ; behaviors
      (org-catch-invisible-edits 'show) ; show otherwise invisible edits
      (org-return-follow-links t)       ; return follows links
      (org-confirm-babel-evaluate nil)  ; org-babel
      (org-startup-indented t)          ; indent blocks in org-mode
      (org-adapt-indentation t)         ; force intendation
      (org-hide-emphasis-markers nil)   ; don't hide marker characters
      (org-enforce-todo-dependencies t) ; don't allow DONE when having children in TODO
      (org-agenda-dim-blocked-tasks t)  ; Blocked tasks get dimmed
      (org-pretty-entities t)           ; show some things in UTF-8
      (org-fast-tag-selection-single-key t) ; allow using fast tags

      ; refile
      (org-refile-use-outline-path 'file) ; use full file name in refile
      (org-outline-path-complete-in-steps nil) ; complete fill in one go
      (org-refile-allow-creating-parent-nodes 'confirm) ;ask when creating new nodes

      ; agenda
      (org-agenda-block-separator nil)
      (org-agenda-start-with-log-mode t)
      (org-agenda-bulk-custom-functions 
           `((?f (lambda () (org-with-wide-buffer
                        (org-agenda-set-tags)
                        (org-agenda-priority)
                        (org-agenda-refile nil nil t))))))
      (org-habit-show-all-today t)

      :config
      (require 'org-capture)
      (require 'org-habit)

      :bind 
      (("<f1>" . (lambda () (interactive) (org-agenda nil "&")))
       ("C-c l" . org-store-link)
       ("C-c a" . org-agenda)
       ("C-c c" . org-capture))

      :hook
      (org-agenda-mode . (lambda () (progn
           (define-key org-agenda-mode-map "i" 'org-agenda-clock-in)
           (define-key org-agenda-mode-map "o" 'org-agenda-clock-out)
           (define-key org-agenda-mode-map "R" 'org-agenda-refile)))))

  (defun js/org-archive-done-tasks ()
      "Archive all done tasks."
      (interactive)
      (org-map-entries 'org-archive-subtree "/DONE" 'file))

  (use-package org-superstar 
    :custom
    (org-hide-leading-stars nil)
    (org-superstar-leading-bullet ?\s)
    (org-indent-mode-turns-on-hiding-stars nil)
    (org-superstar-special-todo-items t)
    :config
    (org-superstar-mode))

  (add-to-list 'load-path (concat user-emacs-directory "lisp/org-habit-plus"))
  (require 'org-habit-plus)

#+end_src
** Mail
Basically set up with this [[https://sqrtminusone.xyz/posts/2021-02-27-gmail/][blog post]].
#+begin_src emacs-lisp
(use-package notmuch
  :ensure nil
  :commands (notmuch)
  :bind ("<f5>" . notmuch))
(setq smtpmail-smtp-user user-mail-address
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 465
      smtpmail-stream-type 'ssl)
#+end_src
* Packages depending on external tools
** Deadgrep
Fast, friendly searching with ripgrep
#+BEGIN_SRC emacs-lisp
(use-package deadgrep
  :ensure-system-package (rg . ripgrep)
  :bind ("<f3>" . deadgrep))
#+END_SRC
** Magit
A Git porcelain inside Emacs
#+BEGIN_SRC emacs-lisp
(use-package magit
    :ensure-system-package git
    :bind
    ("C-x g" . magit-status))
#+END_SRC
** Direnv
Direnv integration for emacs
#+begin_src emacs-lisp
(use-package direnv
    :ensure-system-package direnv
    :config (direnv-mode))
#+end_src
* Programming languages
** Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode  ;;A major emacs mode for editing Rust source code
       :custom
       (rust-rustfmt-bin "~/.rustup/toolchains/nightly-2019-11-13-x86_64-unknown-linux-gnu/bin/rustfmt")
       (rust-format-on-save t)
       (company-tooltip-align-annotations t)
       :bind
       (:map rust-mode-map
             ("TAB" . company-indent-or-complete-common)
             ("<f4>" . cargo-process-build))
       :hook
       (rust-mode . hs-minor-mode))

(use-package flycheck-rust
       :after
       (flycheck rust-mode)
       :hook
       (rust-mode . flycheck-rust-setup)) ;; Flycheck: Rust additions and Cargo support

(use-package racer  ;; Code completion, goto-definition and docs browsing for Rust via racer
         :hook
         (rust-mode . racer-mode)
         (racer-mode . eldoc-mode))

(use-package cargo    ;; Emacs Minor Mode for Cargo, Rust's Package Manager
       :hook
       (rust-mode . cargo-minor-mode)
       :custom
       (cargo-process--command-build "build")
       (cargo-process--command-clippy "clippy --all")
       (cargo-process--command-fmt "+nightly-2019-11-13 fmt")
       (cargo-process--enable-rust-backtrace t))
#+END_SRC
** Haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
         :custom
         (haskell-stylish-on-save nil) ;; Don't use stylish haskell
         (haskell-tags-on-save t)      ;; Update the TAGS file
         (haskell-compiler-type 'stack)
         (haskell-process-type 'stack-ghci)
         (haskell-compile-stack-build-command "stack build")
         (haskell-indent-offset 2)
         (haskell-interactive-popup-errors nil)
         :config
         (add-to-list 'direnv-non-file-modes 'haskell-compilation-mode)
         :bind
         (:map haskell-mode-map
               ("<f4>" . haskell-compile))
         :hook
         (haskell-mode . subword-mode))
#+END_SRC
** Prolog
A bit archaically distributed prolog mode package. Comes from [[https://bruda.ca/_media/emacs/prolog.el][here]].
#+begin_src emacs-lisp
(add-to-list 'load-path (concat user-emacs-directory "lisp/prolog-mode"))
(require 'prolog)
(autoload 'run-prolog "prolog" "Start a Prolog sub-process." t)
(autoload 'prolog-mode "prolog" "Major mode for editing Prolog programs." t)
(autoload 'mercury-mode "prolog" "Major mode for editing Mercury programs." t)
(setq prolog-system 'swi)
(setq auto-mode-alist (append '(("\\.pl$" . prolog-mode)
                               ("\\.m$" . mercury-mode))
                               auto-mode-alist))
   #+end_src
** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
         :commands
         lsp
         :hook
         (rust-mode . lsp)
         (haskell-mode . lsp)
         (lsp-mode . lsp-enable-which-key-integration)
         :custom
         (lsp-prefer-flymake nil)
         (setq lsp-rust-server 'rust-analyzer)
         (lsp-keymap-prefix "C-x C-l")
         (lsp-enable-snippet nil)
         (lsp-file-watch-threshold 2000)
         :config
         (push "[/\\\\]\\.stack-work\\'" lsp-file-watch-ignored-directories)
         (push "[/\\\\]\\target\\'" lsp-file-watch-ignored-directories))

  (use-package lsp-haskell
         :config
         (setq lsp-haskell-process-path-hie "haskell-language-server-wrapper"))

  (setq company-minimum-prefix-length 1
        company-idle-delay 0.0)
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024))

  (use-package lsp-ui
         :hook
         (lsp-mode . lsp-ui-mode)
         :custom
         (lsp-ui-doc-header t)
         (lsp-ui-doc-include-signature t)
         (lsp-ui-doc-position 'top))

  (use-package lsp-treemacs
         :hook
         (lsp-mode . lsp-treemacs-sync-mode))
#+END_SRC
* Emacs built in packages
#+begin_src emacs-lisp
(use-package bug-reference
  :custom
  (bug-reference-bug-regexp (rx (group (| (: "DO" ?-)
                                          (: "CB" ?-)))
                                (group (+ digit))))
  :config 
  (defun my-gitlab-url ()
  "Return a GitLab merge request or issue URL.
  Intended as a value for `bug-reference-url-format'."
  (format "https://example.com/%s%s"
    (match-string-no-properties 1)
    (match-string-no-properties 2)))
  (setq bug-reference-url-format #'my-gitlab-url)
  :hook 
  (org-mode . bug-reference-mode)
  (prog-mode . bug-reference-prog-mode))
#+end_src 

* Experimental 
Stuff that goes in this section is intended to be moved to other sections soon.
#+begin_src emacs-lisp
#+end_src
