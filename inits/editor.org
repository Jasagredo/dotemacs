* Editing
Configurations relative to the editor and several IDE-like features
** Cheatsheet
Friendly cheatsheet for remembering some keys
#+BEGIN_SRC emacs-lisp
(use-package cheatsheet)
#+END_SRC
** Dashboard
A friendly dashboard that shows interesting information on startup.
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :init
  (add-hook 'after-init-hook 'dashboard-refresh-buffer)
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-items '((recents  . 20)
                          (bookmarks . 20)
                          (agenda . 5)))
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t))
#+END_SRC
** Undo-tree
Visual tree for undo-redo and fast operations
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode " Ⓤ "
  :config
  (global-undo-tree-mode))
#+END_SRC
Relevant key-bindings:
#+BEGIN_SRC emacs-lisp
(cheatsheet-add :group 'Editor
                :key "C-/"
                :description "Undo")
(cheatsheet-add :group 'Editor
                :key "C-?"
                :description "Redo")
(cheatsheet-add :group 'Editor
                :key "C-x u"
                :description "Visualize undo-redo tree")
#+END_SRC
** Indent
Visual vertical lines for indentation. Useful for indent-driven languages (as Haskell). We also add it to the hook of programming modes.
#+BEGIN_SRC emacs-lisp
(use-package indent-guide
  :config
  (add-hook 'prog-mode-hook 'indent-guide-mode))
#+END_SRC
** Neotree
Sidebar file tree explorer.
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :config
  (global-set-key (kbd "C-x n t") 'neotree-toggle)
  (setq neo-smart-open t)
  :init
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+END_SRC
Relevant key-bindings:
#+BEGIN_SRC emacs-lisp
(cheatsheet-add :group 'Editor
                :key "C-x n t"
                :description "Toggle neotree")
#+END_SRC
** Multiple cursors
This allows us to spawn multiple cursors.
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :config
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines))
#+END_SRC
Relevant key-bindings:
#+BEGIN_SRC emacs-lisp
(cheatsheet-add :group 'Editor
                :key "C-S-c C-S-c"
                :description "Spawn multiple cursors on region")
#+END_SRC
** Backup and lock files
Emacs creates by default several files as backup. We don't want those to pollute the projects so we move them to another folder.
#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
  backup-by-copying t
  version-control t
  delete-old-versions t
  kept-new-versions 20
  kept-old-versions 5)
#+END_SRC

** Remove trailing whitespace on saving
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Dired
We don't want Dired to create a buffer each time we open an entry.
#+BEGIN_SRC emacs-lisp
(use-package dired
  :config
  (define-key dired-mode-map [mouse-2] 'dired-find-alternate-file)
  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
  (define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file "..")))
  (put 'dired-find-alternate-file 'disabled nil))
#+END_SRC
** Deadgrep
 We just bind deadgrep in case we actually need it separated from helm.
 #+BEGIN_SRC emacs-lisp
 (use-package deadgrep
   :config
   (global-set-key (kbd "<f5>") #'deadgrep))
 #+END_SRC
 Relevant key-bindings:
 #+BEGIN_SRC emacs-lisp
 (cheatsheet-add :group 'Editor
                 :key "<f5>"
                 :description "Deadgrep")
 #+END_SRC
** Ace Window
Changing between several windows sometimes is boring. This shows a number on each windows to easily switch
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :config
  (global-set-key (kbd "M-o") 'ace-window))
#+END_SRC
Relevant key-bindings:
 #+BEGIN_SRC emacs-lisp
 (cheatsheet-add :group 'Editor
                 :key "M-o"
                 :description "Ace-window")
 #+END_SRC

** Helm
Helm interface. Kind of an intelligent minibuffer but extensible to many more things. Allows fuzzy searching on many things so it is actually very useful.
Obtained from https://tuhdo.github.io/helm-intro.html

#+BEGIN_SRC emacs-lisp
(require 'helm)
(require 'helm-config)
(diminish 'helm-mode " Ⓗ ")

;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t
      helm-echo-input-in-header-line t)

(defun helm-hide-minibuffer-maybe ()
  "Hide minibuffer in Helm session if we use the header line as input field."
  (when (with-helm-buffer helm-echo-input-in-header-line)
    (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
      (overlay-put ov 'window (selected-window))
      (overlay-put ov 'face
                   (let ((bg-color (face-background 'default nil)))
                     `(:background ,bg-color :foreground ,bg-color)))
      (setq-local cursor-type nil))))


(add-hook 'helm-minibuffer-set-up-hook
          'helm-hide-minibuffer-maybe)

(setq helm-autoresize-max-height 0)
(setq helm-autoresize-min-height 20)
(helm-autoresize-mode 1)

(helm-mode 1)

(helm-autoresize-mode t)

(global-set-key (kbd "M-x") 'helm-M-x)
(setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x

(global-set-key (kbd "M-y") 'helm-show-kill-ring)

(global-set-key (kbd "C-x b") 'helm-mini)
(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t)

(global-set-key (kbd "C-x C-f") 'helm-find-files)

#+END_SRC
Relevant key-bindings:
#+BEGIN_SRC emacs-lisp
(cheatsheet-add :group 'Editor
                :key "M-x"
                :description "Helm-M-x")
(cheatsheet-add :group 'Editor
                :key "M-y"
                :description "Helm kill ring")
(cheatsheet-add :group 'Editor
                :key "C-c ! h"
                :description "Helm flycheck errors")
#+END_SRC
*** Helm Projectile
It makes projectile use the Helm interface. Very useful for searching.
 #+BEGIN_SRC emacs-lisp
 (use-package helm-projectile
   :config
   (setq helm-projectile-fuzzy-match nil)
   (helm-projectile-on))
 #+END_SRC

*** Helm Flycheck
It uses Helm interface for displaying the Flycheck errors.
 #+BEGIN_SRC emacs-lisp
 (use-package helm-flycheck
   :config
   (eval-after-load 'flycheck
   '(define-key flycheck-mode-map (kbd "C-c ! h") 'helm-flycheck)))
 #+END_SRC
** Magit
Git client for emacs. It doesn't need a lot of configuration.
#+BEGIN_SRC emacs-lisp
(use-package magit
  :config
  (global-set-key (kbd "C-x g") 'magit-status))
#+END_SRC
Relevant key-bindings:
#+BEGIN_SRC emacs-lisp
(cheatsheet-add :group 'Editor
                :key "C-x g"
                :description "Magit")
#+END_SRC
** PATH & related variables
These variables are not automatically added to emacs environment. This packages does it.
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :config
  (setq exec-path-from-shell-variables (quote ("PATH" "MANPATH" "LD_LIBRARY_PATH" "LIBRARY_PATH")))
  (exec-path-from-shell-initialize))
#+END_SRC
** Which-key
It shows a popup with the available completions to the partially introduced key command.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish which-key-mode " Ⓦ "
  :config
  (which-key-mode t))
#+END_SRC

** Misc configs
Activating this we replace text when pasting over a selected region.
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC
We also don't want confirmation when killing the current buffer
#+BEGIN_SRC emacs-lisp
(bind-key (kbd "C-x k") #'kill-this-buffer)
#+END_SRC
And please, don't use tabs
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC
Don't want to answer yes or no, I prefer y/n
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
