* Global settings
** Flycheck
Flycheck executes backends in order to check for errors and suggestions.
 #+BEGIN_SRC emacs-lisp
 (use-package flycheck
   :ensure t
   :diminish flycheck-mode " ✈ "
   :config (add-hook 'after-init-hook #'global-flycheck-mode))
 #+END_SRC
** Projectile
Project management
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode " Ⓟ "
  :init (progn
          (setq projectile-enable-caching nil)
          (setq projectile-switch-project-action 'projectile-dired))
  :config
  (global-set-key "" (quote projectile-run-eshell))
  (projectile-mode 1)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC
Relevant key-bindings:
#+BEGIN_SRC emacs-lisp
(cheatsheet-add :group 'Programming
                :key "C-c p"
                :description "Projectile map")
(cheatsheet-add :group 'Programming
                :key "C-c p s r"
                :description "Ripgrep search in project")
#+END_SRC
** LSP mode
Language server protocols
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :ensure t
  :init
  (add-hook 'prog-major-mode #'lsp-prog-major-mode-enable)
  :config
  (setq lsp-rust-rls-command '("rustup" "run" "rls"))
  (setq lsp-prefer-flymake nil))
#+END_SRC
We also activate the ui when available
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :ensure t
  :init
  (add-hook 'lsp-mode-hook 'lsp-ui-mode)
  :config
  (setq lsp-ui-imenu-kind-position (quote left)))
#+END_SRC
** Haskell
*** Mode
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :config
  (setq haskell-process-type (quote cabal-new-repl))
  (setq haskell-stylish-on-save t)
  (setq haskell-tags-on-save t)
  (define-key haskell-mode-map (kbd "C-c C-a") (lambda () (interactive) (compile "stack build")))
  (define-key haskell-mode-map (kbd "C-c C-k") (lambda () (interactive) (compile "stack clean"))))
#+END_SRC
Relevant key-bindings:
#+BEGIN_SRC emacs-lisp
(cheatsheet-add :group 'Haskell
                :key "C-c C-a"
                :description "Stack build")
(cheatsheet-add :group 'Haskell
                :key "C-c C-k"
                :description "Stack clean")
#+END_SRC
*** Intero
Stack backend to be used in emacs. It gives some errors when things are not properly set up. This depends on the specific project.
#+BEGIN_SRC emacs-lisp
(use-package intero
  :config
  (add-hook 'haskell-mode-hook 'intero-mode))
#+END_SRC
** Rust
*** Mode
Rust mode. It also activates hs for folding code
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :config
  (setq rust-rustfmt-bin "~/.rustup/toolchains/nightly-2019-03-22-x86_64-unknown-linux-gnu/bin/rustfmt")
  (setq rust-format-on-save t)
  (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
  (setq company-tooltip-align-annotations t)
  (add-hook 'rust-mode-hook #'flycheck-mode)
  (add-hook 'rust-mode-hook 'hs-minor-mode)
  (add-hook 'rust-mode-hook 'lsp))
#+END_SRC
Relevant key-bindings:
#+BEGIN_SRC emacs-lisp
(cheatsheet-add :group 'Rust
                :key "<C-S-mouse-2>"
                :description "Fold code")
#+END_SRC
*** Flycheck
We activate flycheck when using rust
#+BEGIN_SRC emacs-lisp
(use-package flycheck-rust)
(with-eval-after-load 'rust-mode
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+END_SRC
*** Racer
Racer gives access to some commands when coding in rust such as going to the declaration of something
#+BEGIN_SRC emacs-lisp
(use-package racer
  :diminish racer-mode " Ⓡ "
  :config
  (add-hook 'rust-mode-hook #'racer-mode)
  (add-hook 'racer-mode-hook #'eldoc-mode)
  (add-hook 'racer-mode-hook #'company-mode))
#+END_SRC
Relevant key-bindings:
#+BEGIN_SRC emacs-lisp
(cheatsheet-add :group 'Rust
                :key "M-."
                :description "Go to definition")
(cheatsheet-add :group 'Rust
                :key "M-,"
                :description "Come back")
#+END_SRC
*** Cargo
Teach emacs how to speak with Cargo
#+BEGIN_SRC emacs-lisp
(use-package cargo
  :diminish cargo-mode " Ⓖ "
  :config
  (add-hook 'rust-mode-hook 'cargo-minor-mode)
  (setq cargo-process--command-build "build")
  (setq cargo-process--command-clippy "clippy --all")
  (setq cargo-process--command-fmt "+nightly fmt")
  (setq cargo-process--enable-rust-backtrace t))
#+END_SRC
Relevant key-bindings:
#+BEGIN_SRC emacs-lisp
(cheatsheet-add :group 'Rust
                :key "[C-u] C-c C-c C-b"
                :description "Cargo Build")
(cheatsheet-add :group 'Rust
                :key "[C-u] C-c C-c C-l"
                :description "Cargo Clean")
(cheatsheet-add :group 'Rust
                :key "[C-u] C-c C-c C-S-k"
                :description "Cargo Clippy")
(cheatsheet-add :group 'Rust
                :key "[C-u] C-c C-c C-r"
                :description "Cargo Run")
#+END_SRC
